# source: https://us1.prisma.sh/eggersjoseph23-36a5ee/crimsonGnome/dev
# timestamp: Fri Jul 05 2019 14:17:50 GMT-0700 (Pacific Daylight Time)

type AggregateProject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProject(data: ProjectCreateInput!): Project!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProject(where: ProjectWhereUniqueInput!): Project
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  GUEST
  CLIENT
}

type Project implements Node {
  id: ID!
  title: String!
  logo: String!
  logoLarge: String!
  pictures: [String!]!
  phonePictures: [String!]!
  phonePicturesLarge: [String!]!
  largePictures: [String!]!
  liveLink: String
  githubLink: String!
  techStack: [String!]!
  paragraphs: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  isSecret: Boolean!
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  title: String!
  logo: String!
  logoLarge: String!
  liveLink: String
  githubLink: String!
  isSecret: Boolean
  pictures: ProjectCreatepicturesInput
  phonePictures: ProjectCreatephonePicturesInput
  phonePicturesLarge: ProjectCreatephonePicturesLargeInput
  largePictures: ProjectCreatelargePicturesInput
  techStack: ProjectCreatetechStackInput
  paragraphs: ProjectCreateparagraphsInput
}

input ProjectCreatelargePicturesInput {
  set: [String!]
}

input ProjectCreateparagraphsInput {
  set: [String!]
}

input ProjectCreatephonePicturesInput {
  set: [String!]
}

input ProjectCreatephonePicturesLargeInput {
  set: [String!]
}

input ProjectCreatepicturesInput {
  set: [String!]
}

input ProjectCreatetechStackInput {
  set: [String!]
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  logo_ASC
  logo_DESC
  logoLarge_ASC
  logoLarge_DESC
  liveLink_ASC
  liveLink_DESC
  githubLink_ASC
  githubLink_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isSecret_ASC
  isSecret_DESC
}

type ProjectPreviousValues {
  id: ID!
  title: String!
  logo: String!
  logoLarge: String!
  pictures: [String!]!
  phonePictures: [String!]!
  phonePicturesLarge: [String!]!
  largePictures: [String!]!
  liveLink: String
  githubLink: String!
  techStack: [String!]!
  paragraphs: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  isSecret: Boolean!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  title: String
  logo: String
  logoLarge: String
  liveLink: String
  githubLink: String
  isSecret: Boolean
  pictures: ProjectUpdatepicturesInput
  phonePictures: ProjectUpdatephonePicturesInput
  phonePicturesLarge: ProjectUpdatephonePicturesLargeInput
  largePictures: ProjectUpdatelargePicturesInput
  techStack: ProjectUpdatetechStackInput
  paragraphs: ProjectUpdateparagraphsInput
}

input ProjectUpdatelargePicturesInput {
  set: [String!]
}

input ProjectUpdateManyMutationInput {
  title: String
  logo: String
  logoLarge: String
  liveLink: String
  githubLink: String
  isSecret: Boolean
  pictures: ProjectUpdatepicturesInput
  phonePictures: ProjectUpdatephonePicturesInput
  phonePicturesLarge: ProjectUpdatephonePicturesLargeInput
  largePictures: ProjectUpdatelargePicturesInput
  techStack: ProjectUpdatetechStackInput
  paragraphs: ProjectUpdateparagraphsInput
}

input ProjectUpdateparagraphsInput {
  set: [String!]
}

input ProjectUpdatephonePicturesInput {
  set: [String!]
}

input ProjectUpdatephonePicturesLargeInput {
  set: [String!]
}

input ProjectUpdatepicturesInput {
  set: [String!]
}

input ProjectUpdatetechStackInput {
  set: [String!]
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  logo: String

  """All values that are not equal to given value."""
  logo_not: String

  """All values that are contained in given list."""
  logo_in: [String!]

  """All values that are not contained in given list."""
  logo_not_in: [String!]

  """All values less than the given value."""
  logo_lt: String

  """All values less than or equal the given value."""
  logo_lte: String

  """All values greater than the given value."""
  logo_gt: String

  """All values greater than or equal the given value."""
  logo_gte: String

  """All values containing the given string."""
  logo_contains: String

  """All values not containing the given string."""
  logo_not_contains: String

  """All values starting with the given string."""
  logo_starts_with: String

  """All values not starting with the given string."""
  logo_not_starts_with: String

  """All values ending with the given string."""
  logo_ends_with: String

  """All values not ending with the given string."""
  logo_not_ends_with: String
  logoLarge: String

  """All values that are not equal to given value."""
  logoLarge_not: String

  """All values that are contained in given list."""
  logoLarge_in: [String!]

  """All values that are not contained in given list."""
  logoLarge_not_in: [String!]

  """All values less than the given value."""
  logoLarge_lt: String

  """All values less than or equal the given value."""
  logoLarge_lte: String

  """All values greater than the given value."""
  logoLarge_gt: String

  """All values greater than or equal the given value."""
  logoLarge_gte: String

  """All values containing the given string."""
  logoLarge_contains: String

  """All values not containing the given string."""
  logoLarge_not_contains: String

  """All values starting with the given string."""
  logoLarge_starts_with: String

  """All values not starting with the given string."""
  logoLarge_not_starts_with: String

  """All values ending with the given string."""
  logoLarge_ends_with: String

  """All values not ending with the given string."""
  logoLarge_not_ends_with: String
  liveLink: String

  """All values that are not equal to given value."""
  liveLink_not: String

  """All values that are contained in given list."""
  liveLink_in: [String!]

  """All values that are not contained in given list."""
  liveLink_not_in: [String!]

  """All values less than the given value."""
  liveLink_lt: String

  """All values less than or equal the given value."""
  liveLink_lte: String

  """All values greater than the given value."""
  liveLink_gt: String

  """All values greater than or equal the given value."""
  liveLink_gte: String

  """All values containing the given string."""
  liveLink_contains: String

  """All values not containing the given string."""
  liveLink_not_contains: String

  """All values starting with the given string."""
  liveLink_starts_with: String

  """All values not starting with the given string."""
  liveLink_not_starts_with: String

  """All values ending with the given string."""
  liveLink_ends_with: String

  """All values not ending with the given string."""
  liveLink_not_ends_with: String
  githubLink: String

  """All values that are not equal to given value."""
  githubLink_not: String

  """All values that are contained in given list."""
  githubLink_in: [String!]

  """All values that are not contained in given list."""
  githubLink_not_in: [String!]

  """All values less than the given value."""
  githubLink_lt: String

  """All values less than or equal the given value."""
  githubLink_lte: String

  """All values greater than the given value."""
  githubLink_gt: String

  """All values greater than or equal the given value."""
  githubLink_gte: String

  """All values containing the given string."""
  githubLink_contains: String

  """All values not containing the given string."""
  githubLink_not_contains: String

  """All values starting with the given string."""
  githubLink_starts_with: String

  """All values not starting with the given string."""
  githubLink_not_starts_with: String

  """All values ending with the given string."""
  githubLink_ends_with: String

  """All values not ending with the given string."""
  githubLink_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  isSecret: Boolean

  """All values that are not equal to given value."""
  isSecret_not: Boolean
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  user(where: UserWhereUniqueInput!): User
  project(where: ProjectWhereUniqueInput!): Project
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  access: Permission!
  adminView: Boolean!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  access: Permission
  adminView: Boolean
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  access_ASC
  access_DESC
  adminView_ASC
  adminView_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  access: Permission!
  adminView: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  access: Permission
  adminView: Boolean
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  access: Permission
  adminView: Boolean
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  access: Permission

  """All values that are not equal to given value."""
  access_not: Permission

  """All values that are contained in given list."""
  access_in: [Permission!]

  """All values that are not contained in given list."""
  access_not_in: [Permission!]
  adminView: Boolean

  """All values that are not equal to given value."""
  adminView_not: Boolean
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
